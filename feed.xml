<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://meimchu.github.io/</id><title>Objectively Disorienting Language</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2022-08-23T00:04:21-07:00</updated> <author> <name>Mei Chu</name> <uri>https://meimchu.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://meimchu.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://meimchu.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Mei Chu </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>more const</title><link href="https://meimchu.github.io/posts/c++-more-const/" rel="alternate" type="text/html" title="more const" /><published>2022-08-22T00:00:00-07:00</published> <updated>2022-08-23T00:02:48-07:00</updated> <id>https://meimchu.github.io/posts/c++-more-const/</id> <content src="https://meimchu.github.io/posts/c++-more-const/" /> <author> <name>Mei Chu</name> </author> <category term="C++" /> <summary> As I was trying to understand myself due to multiple ways a const might exist in code, I have found one neat little tip I found regarding const that helps us identify what that const means. I found that out through this website The C++ ‘const’ Declaration: Why &amp;amp; How. The key setence I want to highlight is: Basically ‘const’ applies to whatever is on its immediate left (other than if there ... </summary> </entry> <entry><title>const in parameters</title><link href="https://meimchu.github.io/posts/c++-const-parameters/" rel="alternate" type="text/html" title="const in parameters" /><published>2022-06-24T00:00:00-07:00</published> <updated>2022-06-24T00:25:06-07:00</updated> <id>https://meimchu.github.io/posts/c++-const-parameters/</id> <content src="https://meimchu.github.io/posts/c++-const-parameters/" /> <author> <name>Mei Chu</name> </author> <category term="C++" /> <summary> There is a concept in C++ known as top-level and low-level const. Top-level const indicates that the pointer itself is a const. Low-level const indicates that the pointer is pointing to a const object. When you initialize a variable such as: int i = 0; int *const p1 = &amp;amp;i; This is known as a top-level const as the variable p1 is a const pointer to non-const i variable. You cannot modif... </summary> </entry> <entry><title>Namespace</title><link href="https://meimchu.github.io/posts/c++-namespace/" rel="alternate" type="text/html" title="Namespace" /><published>2022-02-17T00:00:00-08:00</published> <updated>2022-06-24T00:25:06-07:00</updated> <id>https://meimchu.github.io/posts/c++-namespace/</id> <content src="https://meimchu.github.io/posts/c++-namespace/" /> <author> <name>Mei Chu</name> </author> <category term="C++" /> <summary> :: is known as a scope operator in C++. It tells the codes to look at the scope of the left-hand operand for the name of the right-hand operand. For example, std::cout would say that we want to use cout from the namespace std. That specifies the library name std. There are ways around having to specify the library every time we want to use something from there. The safest way is a using declar... </summary> </entry> <entry><title>Advent of Code 2021</title><link href="https://meimchu.github.io/posts/advent-of-code/" rel="alternate" type="text/html" title="Advent of Code 2021" /><published>2021-12-01T00:00:00-08:00</published> <updated>2022-06-24T00:18:50-07:00</updated> <id>https://meimchu.github.io/posts/advent-of-code/</id> <content src="https://meimchu.github.io/posts/advent-of-code/" /> <author> <name>Mei Chu</name> </author> <category term="Etc" /> <summary> Advent of Code Ever since I’ve known about Advent of Code, I always get pretty excited to do my best tackling it comes December. This year is no different! Even though I may not always finish them due to a variety of reasons, I always feel like I learn a bit with each attempt. This year, I come prepared with some greater understanding in terms of the grid and graph data structure traversal. Ho... </summary> </entry> <entry><title>Class inheritance</title><link href="https://meimchu.github.io/posts/class-inheritance/" rel="alternate" type="text/html" title="Class inheritance" /><published>2019-12-28T00:00:00-08:00</published> <updated>2022-06-24T00:25:06-07:00</updated> <id>https://meimchu.github.io/posts/class-inheritance/</id> <content src="https://meimchu.github.io/posts/class-inheritance/" /> <author> <name>{"name"=>"Mei Chu"}</name> </author> <category term="Python" /> <summary> Class inheritance is an important subject to understand when it comes to objected oriented programming. It is the basis in which we can code as little as possible yet still have it contain as much information as possible. I want to focus on the initialization aspect of class inheritance and step through it so it becomes more clear. Consider this simple class example at first: class A(): de... </summary> </entry> </feed>
